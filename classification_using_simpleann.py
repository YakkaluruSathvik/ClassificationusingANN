# -*- coding: utf-8 -*-
"""Classification_using_SimpleANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OK3UkN6jyGfZ7E0fFKsQ2Kb4SLm2IA3B

Creating a Simple **Artificial Neural Network** for *Classification Problem*
"""

# Importing required modules
import numpy as np
import matplotlib.pyplot as plt

# Activation Function - Sigmoid & it's derivative Function
def sigmoid(x):
    return 1/(1+np.exp(-x))
def sigmoid_derivative(sgm):
    return sgm*(1-sgm)

# For a Simple 1 Input - 1 Output Neural Network
def output(x,w):
    x = x.astype(float)
    y = sigmoid(np.dot(x,w))
    return y

# Training the ANN and tuning the weights by back propagation
def train(training_inputs,training_outputs,no_of_iterations,weights):
    for _ in range(no_of_iterations):
        y = output(training_inputs,weights)
        error = training_outputs-y
        adjustments = np.dot(training_inputs.T,error*sigmoid_derivative(y))
        weights += adjustments
    plt.figure()
    plt.plot(error)
    plt.title('Error vs Number of Iterations')
    plt.xlabel('Iteration number')
    plt.ylabel('Error')

    plt.figure()
    plt.plot(y)
    plt.title('Predicted Output vs Number of Iterations')
    plt.xlabel('Iteration number')
    plt.ylabel('Predicted Output')

# Data 
training_inputs = np.array([[1,0,0,1,0,1,1],
                            [0,1,1,0,1,0,0],
                            [1,0,1,0,0,0,1],
                            [0,0,0,1,0,0,0],
                            [1,1,0,1,0,1,1],
                            [0,1,0,0,0,0,0],
                            [0,0,1,0,1,0,1]])
training_outputs = np.array([[1],
                             [0],
                             [0],
                             [1],
                             [1],
                             [1],
                             [0]])
number_of_iterations = 100000

# Initializing Weights - Random Weigths between 0 and 1
weights = np.random.random((len(training_outputs),1))
print('Weights before Training')
weights

train(training_inputs,training_outputs,number_of_iterations,weights)

print('Weights after Training')
weights

# Testing the ANN
test_input = np.array([0,0,1,0,1,0,1])
test_output = output(test_input,weights)

print(test_output)